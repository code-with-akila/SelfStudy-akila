1..Create an interface called "BankAccount" with methods called "deposit" and "withdraw". Create a class called "CheckingAccount" that implements the BankAccount interface and implements the "deposit" and "withdraw" methods. Create an object of the CheckingAccount class and call both the "deposit" and "withdraw" methods.

package com.lab;

interface BankAccount 	//Define an interface called BankAccount
{
	 void deposit(double amount);  // Method to deposit money
	 void withdraw(double amount); // Method to withdraw money
}


class CheckAccount implements BankAccount 	//Create a class CheckAccount that implements BankAccount
{
	 private double balance; // Variable to store account balance
	
	 
	 public CheckAccount(double initialBalance) 	// Constructor to initialize balance
	 {
	     this.balance = initialBalance;
	 }
	
	 // Implement the deposit method
	 @Override
	 public void deposit(double amount) 
	 {
	     if (amount > 0) 
	     {
	         balance += amount;
	         System.out.println("Deposited: " + amount);
	         System.out.println("New Balance: " + balance);
	     } 
	     else 
	     {
	         System.out.println("Deposit amount must be positive.");
	     }
	 }
	
	 // Implement the withdraw method
	 @Override
	 public void withdraw(double amount) 
	 {
	     if (amount > 0 && amount <= balance) 
	     {
	         balance -= amount;
	         System.out.println("Withdrawn: " + amount);
	         System.out.println("New Balance: " + balance);
	     } 
	     else if (amount > balance) 
	     {
	         System.out.println("Insufficient funds!");
	     } 
	     else 
	     {
	         System.out.println("Withdrawal amount must be positive.");
	     }
	 }
}

package com.lab;

//Main class to test CheckingAccount
public class MainAccount 
{
	public static void main(String[] args) 
	{
	   
	   CheckAccount myAccount = new CheckAccount(1000);		// Create an object of CheckAccount with an initial balance of 1000
	   
	   // Call deposit and withdraw methods
	   myAccount.deposit(500);  // Depositing 500
	   myAccount.withdraw(300); // Withdrawing 300
	   myAccount.withdraw(1500); // Trying to withdraw more than balance
	}
}


##output
Deposited: 500.0
New Balance: 1500.0
Withdrawn: 300.0
New Balance: 1200.0
Insufficient funds!


2.Write a Java program to create an interface Resizable with methods resizeWidth(int width) and resizeHeight(int height) that allow an object to be resized. Create a class Rectangle that implements the Resizable interface and implements the resize methods.

package com.lab;

interface Resizable 	//Define an interface called Resizable
{
	void resizeWidth(int width);  // Method to resize width
	void resizeHeight(int height); // Method to resize height
}

class Rectangle1 implements Resizable 	//Create a class Rectangle that implements Resizable
{
	 private int width;
	 private int height;
	
	 
	 public Rectangle1(int width, int height) 	// Constructor to initialize width and height
	 {
	     this.width = width;
	     this.height = height;
	 }

	 // Implement the resizeWidth method
	 @Override
	 public void resizeWidth(int width) 
	 {
	     if (width > 0) 
	     {
	         this.width = width;
	         System.out.println("New Width: " + this.width);
	     } 
	     else 
	     {
	         System.out.println("Width must be positive.");
	     }
	 }
	
	 // Implement the resizeHeight method
	 @Override
	 public void resizeHeight(int height) 
	 {
	     if (height > 0) 
	     {
	         this.height = height;
	         System.out.println("New Height: " + this.height);
	     } 
	     else 
	     {
	         System.out.println("Height must be positive.");
	     }
	 }
}

package com.lab;

//Main class to test Rectangle
public class MainRectangle 
{
	public static void main(String[] args) 
	{
   
		Rectangle1 myRectangle = new Rectangle1(10, 20);		// Create an object of Rectangle with initial dimensions 10x20
   
	   // Call resize methods
	   myRectangle.resizeWidth(30);  // Resizing width to 30
	   myRectangle.resizeHeight(40); // Resizing height to 40
	}
}

##output
New Width: 30
New Height: 40
