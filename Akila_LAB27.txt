1. Implement Queue in java with all operations.

  (without using in-built structures.)

package com.lab;

public class Queue {
    int length = 3;		// Maximum size of the queue
    int items[] = new int[length];		// Array to store queue elements
    int front = -1, rare = -1;		// Front and rear pointers

    boolean isfull()		// Method to check if the queue is full
    {
        return rare == length - 1;
    }

    boolean isempty()		// Method to check if the queue is empty
    {
        return front == -1 && rare == -1;
    }

    void insert(int data)		// Method to insert an element into the queue
    {
        if (isfull()) 
        {
            System.out.println("Queue is full");
        } 
        else 
        {
            if (front == -1 && rare == -1)		// If queue is empty
            { 
                front = 0;
                rare = 0;
            } 
            else 
            {
                rare++; 	// Move rear pointer forward
            }
            items[rare] = data; 	// Insert the element
        }
    }

    void remove()		// Method to remove an element from the queue
    {
        if (isempty()) 
        {
            System.out.println("Queue is empty");
        } 
        else 
        {
            if (front == rare)		// If only one element is left 
            { 
                front = rare = -1;
            } 
            else 
            {
                front++; 	// Move front pointer forward
            }
        }
    }

    void display()		// Method to display elements of the queue
    {
        if (isempty()) 
        {
            System.out.println("Queue is empty");
            return;
        }
        for (int i = front; i <= rare; i++) 
        {
            System.out.println(items[i]);
        }
    }

    public static void main(String[] args) 
    {
        Queue q1 = new Queue();

        q1.insert(11);
        q1.insert(12);
        q1.insert(13);

        q1.display(); // Display current queue

        q1.insert(20); // Attempting to insert into a full queue

        q1.remove(); // Remove an element

        q1.display(); // Display queue after removal

        q1.remove(); // Remove another element

        q1.display(); // Display queue after another removal
    }
}

##Output
11
12
13
Queue is full
12
13
13


2. Implement Stack in java with all operations.

  (without using in-built structures.)

package com.lab;

public class Stack 
{
    private int capacity; 	// Maximum size of the stack
    private int topIndex; 	// Index of the top element
    private int[] stackArray; 	// Array to store stack elements

    public Stack(int size)		// Constructor to initialize the stack
    {
        capacity = size;
        stackArray = new int[capacity];
        topIndex = -1; 	// Stack is initially empty
    }

    public void push(int value)		// Method to push an element onto the stack
    {
        if (topIndex >= capacity - 1) 
        {
            System.out.println("Stack Overflow! Cannot push " + value);
        } 
        else 
        {
            stackArray[++topIndex] = value;
            System.out.println(value + " pushed onto stack");
        }
    }

    public int pop()		// Method to pop an element from the stack
    {
        if (topIndex == -1) 
        {
            System.out.println("Stack Underflow! Stack is empty.");
            return -1;
        } 
        else 
        {
            return stackArray[topIndex--];
        }
    }

    public int peek()		// Method to view the top element without removing it
    {
        if (topIndex == -1) 
        {
            System.out.println("Stack is empty.");
            return -1;
        } 
        else 
        {
            return stackArray[topIndex];
        }
    }

    public boolean isEmpty()		// Method to check if the stack is empty
    {
        return topIndex == -1;
    }

    public boolean isFull()		// Method to check if the stack is full
    {
        return topIndex == capacity - 1;
    }

    public int size()		// Method to get the current size of the stack
    {
        return topIndex + 1;
    }

    public void display()		// Method to display all elements in the stack
    {
        if (topIndex == -1) 
        {
            System.out.println("Stack is empty.");
        } 
        else 
        {
            System.out.print("Stack elements: ");
            for (int i = 0; i <= topIndex; i++) 
            {
                System.out.print(stackArray[i] + " ");
            }
            System.out.println();
        }
    }
    
    public static void main(String[] args) 
    {
        Stack stack1 = new Stack(5);

        stack1.push(10);
        stack1.push(20);
        stack1.push(30);
        stack1.push(40);
        stack1.push(50);
        
        stack1.push(70); 	// This should display Stack Overflow message

        stack1.display(); 	// Display current stack elements

        System.out.println("Top element is: " + stack1.peek());

        System.out.println("Popped element: " + stack1.pop());

        stack1.display(); 	// Display stack after popping an element

        System.out.println("Is stack empty? " + stack1.isEmpty());

        System.out.println("Current stack size: " + stack1.size());
    }
}

##output
10 pushed onto stack
20 pushed onto stack
30 pushed onto stack
40 pushed onto stack
50 pushed onto stack
Stack Overflow! Cannot push 70
Stack elements: 10 20 30 40 50 
Top element is: 50
Popped element: 50
Stack elements: 10 20 30 40 
Is stack empty? false
Current stack size: 4
